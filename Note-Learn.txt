Note-Learn.txt
一、姓名和邮箱
$ git config --global user.name
Atra
$ git config --global user.email
atraa0621@gmail.com

二、命令
$ cd /d/Download //切换路径
$ ls //列出当前目录下的文件夹和目录
$ pwd //显示当前目录
$ ls -ah //查看隐藏的目录

$ git status //查看仓库状态
$ git diff //查看修改
$ git log //查看历史记录
$ git log --pretty=oneline //简化历史记录

$ git checkout //切换到里一个分支

三、创建版本库
$ mkdir learn-git //创建一个新目录
$ cd learn-git //进入目录

$ git init //将该目录变成GIT管理的仓库

$ git add Note-Learn.txt //把该文件添加到仓库
$ git commit -m "Note_01_init" //将文件提交到仓库

四、时光穿梭机
$ git reset --hard HEAD^ //回到上一个版本
$ git reset --hard 0d1792 //回到0d1792版本

$ git reflog //显示每一次命令

$ git checkout -- Note-Learn.txt //把工作区的修改撤回
$ git reset HEAD <Note-Learn.txt> //把暂存区的修改撤回，放回工作区

五、Git的工作区和暂存区的概念
1、learn-git是工作区
2、隐藏目录.git是Git的版本库
    其中stage（index）叫暂存区

六、Git管理的是修改，而不是文件
    然后就没有然后了

七、连接gitHub
$ git remote add origin git@github.com:Tra321/learn-git.git //关联一个远程库
$ git push -u origin master //推送master分支的所有内容

八、从远程克隆库
1、先在GitHub上创建一个新的仓库
2、用git clone克隆一个本地库
    $ git clone git@github.com:Tra321/gitskills.git //克隆一个本地库

九、分支管理
$ git checkout -b dev //创建并且切换到dev分支
$ git switch -c dev 
$ git switch master //切换到已有的分支

$ git branch //查看当前分支

$ git add Note-Learn.txt
$ git commit -m "branch test" //在分支dev上提交

$ git merge dev //合并dev中到master分支上
$ git branch -d dev //删除dev

$ git log graph //查看分支合并图 

解决冲突

先冲突，再解决

又要创建新的dev，烦死了
$ git merge --no-ff -m "merge with no-ff" dev //合并dev，--no-ff禁用Fast forward
--no-ff参数用于普通合并，有历史分支，用于团队开发

$ git log --graph --pretty=oneline --abbrev-commit //查看分支历史

master分支非常稳定，用于发布新版本
团队在自己的分支上干活合并到dev分支上
合并好之后再更新版本到master上

忘记改名字了

Bug分支
$ git stash //保护现场，不影响当前状态切换到其他分支近进行操作
$ git checkout master //假设修复master分支上的bug
$ git checkout -b issue-101 //从master上建立临时分支
$ git add readme.txt 
$ git commit -m "fix bug 101" //提交修复完成的
$ git switch master 
$ git merge --no-ff -m "merged bug fix 101" issue //完成合并
$ git switch dev

$ git stash list //查看stash内容

 恢复工作现场
    1、$ git stash apply //恢复后satsh内容不删除
        $ git stash drop //删除stash内容
    2、$ git stash pop //恢复同时删除stash

多次stash，用 git stash list 查看 
$ git stash apply stash@{0} //恢复指定的stash

$ git cherry-pick <commit> //复制一个特定的提交到当前分支

Feature分支

开发一个新的功能，开发完之后需要删除

$ git switch -c feature-vulcan //新的分支用于新功能
$ git add vulcan.py 
$ git commit -m "add feature vulcan" //提交
$ git switch dev 
$ git branch -d feature-vulcan //删除分支
$ git branch -D feature-vulcan //强行删除 

多人协作

$ git remote //查看远程库
$ git remote -v //产看远程库详细信息
抓取分支
多人同时向origin/dev分支提交，推送失败，需要用git pull把最新的提交从origin/dev抓下来，在本地合并后再提交
$ git checkout -b dev origin/dev //创建远程origin的分支dev到本地
$ git push origin dev //像origin/dev推送自己的修改
推送失败 
若抓取显示 no tracking information
$ git branch --set-upstream-to=origin/dev dev //指定本地dev分支与远程origin/dev分支的链接
$ git pull //抓取 
解决冲突后再push